{"version":3,"sources":["src/react-dom/dom.js","src/react-dom/render.js","src/react-dom/diff.js","src/react/set-state-queue.js","src/react/component.js","src/react/create-element.js","src/react/index.js","src/react-dom/index.js","src/index.js"],"names":["setAttribute","dom","name","value","test","toLowerCase","style","cssText","removeAttribute","_render","vnode","undefined","String","tag","component","attrs","base","textNode","document","createTextNode","createElement","Object","keys","forEach","key","children","child","render","container","innnerHTML","appendChild","diff","result","diffNode","parentNode","out","nodeType","textContent","replaceChild","diffComponent","isSameNodeType","childNodes","map","length","diffChildren","diffAttributes","vchildren","domChildren","keyed","index","push","min","childrenLen","vchild","c","f","nextSibling","removeNode","insertBefore","_component","oldDom","constructor","setComponentProps","unmountComponent","createComponent","old","attributes","attr","nodeName","renderComponent","renderer","componentWillUpdate","componentDidUpdate","componentDidMount","props","componentWillMount","compoentWillReceiveProps","Constructor","inst","prototype","componentWillUnmount","setStateQueue","renderQueue","defer","fn","Promise","resolve","then","enqueueSetState","stateChange","flush","some","item","shift","prevState","assign","state","Component","Conuter","count","console","log","setState","onAddCount","bind","React","App","ReactDOM","getElementById"],"mappings":";;AQAA;;AACA;;;ADDA,AHAA,ACAA,ACAA,AHAA;AFAA,AICA;ALDO,AKEP,ACDA,AHCA,IAAMiF,KHFUjF,QGEG,GAAG,CHFf,CAAsBC,AGE7B,EAA0B,CHFnB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AEC/C,AFAI,ACAJ,AIEA;ALDI,AKEJ,AFDA,IAAM+E,EHDEhF,IAAI,KAAK,AOAF,AJCE,GAAG,EAApB,EAAwB,IHDpB,EAA0B;AEA9B,AFCQA,AOAJyB,ANDJ,AIGA,AFAA,EIFIA,EPAIzB,IAAI,AOAF,EAANyB,CPAW,OAAP;AACH,AOFU,ANCf,GDH+C,CAK3C,WMFW;ALCf,AIEA,ACFIsE,AHEJ,EGFIA,OHEKd,EGFI,EAATc,CHEJ,CAAeb,EAAf,EAAmB,YGHJ;ALEf,AIEA,ACFIhE,AHEA,EGFAA,EFHE6E,KDKKZ,MGFM,CHEC,CGFdjE,AHEekE,OAAR,GAAkBC,IAAlB,CAAuBH,EAAvB,CAAP;AHDA,ACAG,AGHH,ACKJ,ACLe,AHKd,MHFO,GCAQ3E,KDAAL,ECAT,CAAiBM,CDAhB,CAAaR,GCAd,CDAC,CAAJ,ACA2B,EDAH;AACpBA,ACAJ,AGHA,ACKJ,ILFQA,ECAAQ,EDAI,GAAGR,ACAF,IDAM,CAACG,ACAFM,SAAV,EDAO,EAAP,ACAuBD,KAAK,KAAK,IAAjC,IAAyC,OAAOA,KAAP,KAAiB,SAA9D,EAAyE;ADCrET,ACAAS,AGHJ,ACKJ,AFFC,EAED,EHFQT,ACAAS,GDAG,CAACR,CCAC,GDAF,ACAK,CDAR,CCAA,EDAYC,KAAK,EIHG,EJGC,EAArB,CAFoB,CAGpB;AACH,ACDA,AGJuB,ACM5B,GLLI,KIDYuE,CJKL,IAAIxE,AILa,IJKT,KAAK,OAAb,EAAsB,qDILT,EAAI;AJMpB,AKCR,AFDO,QHAK,CAACC,AKCJiB,AFDOoE,KHAJ,IAAU,IKCtB,CAAwB3E,CFDjB,CHAsBV,AGAGsF,CEChC,EAA6B1E,ELDP,GKCtB,ELDuC,AKCU,CFD1C,EAAsCD,KHArC,EAAyC,EGA1C,EAAiD;AHC5Cb,ACFR,AGLwB,ACQxBc,AFDA,EECAA,ILDQd,ACFJ,CIGC,ELDM,CAACK,AKCJS,GJHGL,EDEH,AKCK,CLDKH,ECFd,CIGa,EAAjB,ELDQ,ACFa,GDEOJ,KAAK,ACFjC,EAA+B,EDEM,EAA7B;AACH,ACFDO,AEEJ,IFFIA,CDAA,CGEAuE,GFFK,EDEE,CCFCrE,GDEGT,GCFG,CAACO,AEEF,CHAG,AGAFiC,IHAM,ACFN,CAAd,CEEA,KAAyB,CHAExC,AGA/B,EAAgC,GHAR,MAAiB,QAA9B,EAAwC;AAC3C,ACFP,AGNG,ACMyC,AFEzCgF,GFRuB,CAQ3B,AEAIA,KCRKa,ADQA,CAACN,CHAG,GIRT,CJQaxF,AGAR,CAAL,CCRa,EAAb,CJQI,IAAiBC,KAAjB,EAAwB,KKFGsB,QAAU;ALGjC,ACAZ,AGRI,ACK+BA,AFGlC,IEHkCA,KDL1BiD,GCKoC,EDLzC,GAAaA,KAAb;AJSQzE,ACAZ,AGRC,ACI4C,IDH7C,IJOYA,GAAG,CAACK,KAAJ,CAAUJ,KAAV,IAAkB,OAAOC,KAAK,CAAED,KAAF,CAAZ,KAAyB,QAAzB,GAAoCC,KAAK,CAAED,KAAF,CAAL,GAAgB,IAApD,GAA2DC,KAAK,CAAED,KAAF,CAAlF;AEXhB,AFYa,ACAT,AEFC,GAJmD,CAKpD;ADVJ,AFYS,ACAL,AIJA,KLJ6B,CASzB,GKLG;AHPX,AGQQW,AFEJoE,EAAAA,EEFIpE,GAAG,EAAHA,GADG,GFGM,CAACqC,IAAd,CAAmB;ADTvB,AFYK,AKJGnC,AFEA0E,GHRG,CKMH1E,AFEA0E,KHEG,AKJE,EAAL1E,IFEW,CEJR,CFIH0E,WADe;AKdvB,ANMA,AFYQ,ACFJ,AIFIhE,AFEAX,IEFAW,AFEAX,EFAA,EDEIZ,IAAI,AKJA,CJEDQ,AEAE,CEFTe,CFEAX,CHEYb,ECFA,CDEZ,ACFaY,EDEI,CCFjB,AILG,KJKkB,EGThB4E,QHST,EAAqC,GGTf;AIN1B,ANMA,AFYYxF,ACFJ,AGTA,ACOAuB,AFDe,GAAnB,CECIA,ELIIvB,CKJD,ELII,AKJFc,CLIIb,IAAF,AKJG,CLIN,AKJOsB,GLIOrB,AKJb,IAAa,CLIK,IAAI,EAAvB;AQjBZ,ARkBS,ACFD,AGTA,ACEG,GAAP,KJOUW,SAAS,GAAG,2BAAgBJ,KAAK,CAACG,GAAtB,EAA2BH,KAAK,CAACK,KAAjC,CAAlB;ACVR,ADWQ,AGRA,ACMP,AFEG,IKhBEmF,ELgBE,CAAChB,WAAW,CAACS,IAAZ,CAAiB,SFAA7E,CEAA8E,IAAI,IFAtB,EAA6BlF,KAAK,CAACK,KAAnC;ACVR,AFYQ,ACDA,AGRA,ADOsB,QHElBZ,GCDGW,AEDmB8E,EHE1B,EAAW,AGFmB,KFCd,AEDmB9E,CFClBE,IAAjB,IEDsB;ADT9B,AFYYf,ACDP,AGRG,ACIP,AFE6B,GFhBC,AEgBtB,CFGL,AEHA,EHGQA,AGH2C,GHGxC,CAACD,YAAJ,CAAiBE,IAAjB,EAAuBC,KAAvB,QITasF,WAAjB,EAA8B,IAA9B;AFFR,AFYS,AITJ,ADMGP,IAAAA,CHCA,MAEO,IKJA9D,AFCI,CAAC8B,IAAZ,CAAiBpC,SAAjB;ADRR,AFYYb,AGHP,MHGOA,GAAG,CAACO,eAAJ,CAAoBN,IAApB;AQpBR,ANSG,AFYE,ACFL,MAAI,GCVQ6B,IAAT,ADUQrB,CCVMT,GAAd,CDUC,COnBQyE,ANSUhE,IDUD,COnBrB,ANSG,EMTgB,ANSUkB,KDUzB,ICVD,ADU8B,ECVO,KDUAlB,KAAP,KAAiB,QAAlD,EAA4D;AOnBzC,ANUnB,AFYC,ACFG,AEHH,MDPKsB,EDUEf,ICVI,GAAGgB,CDUC,GAAGf,ICVI,CAAEjB,GAAF,ADUI,CAACkB,CCVET,KAAP,CAAvB,ODUmB,CAAwBA,KAAxB,CAAf;ADGP,ACFO,AEHP,WFGcO,QAAP;AOrBe,ANYnB,ADUC,MCVIW,SAAS,IAAII,MAAM,CAACE,UAAP,KAAsBN,SAAxC,EAAoD;AAChDA,ACKP,EACD,EDNQA,SAAS,CAACE,CEDHmE,UFCP,CAAuBjE,MAAvB;AMZA,ANaH,ADUD,AEJJ,MFIU/B,GAAG,GAAGiB,QAAQ,CAACE,SOvBXsD,IPuBE,COvBR,APuB+BhE,EOxBhB,CACD,EPuBsB,CAACG,GAA7B,CAAZ;AEHJ;AKnBQ,ANcJ,ADUA,AEJJ,MFIQH,GCVGsB,CMdEgE,CPwBA,CAACjF,GOxBN,ANcJ,EDUA,COxBiB,CPwBA;AOxBE,ANetB,ADUOM,AEJR,IFIQA,MAAM,CA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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["export function setAttribute(dom, name, value) {\r\n    // 如果属性名是className，则返回class\r\n    if (name === 'className') {\r\n        name = 'class';\r\n    }\r\n    // 如果属性名是onXXX，则是一个监听方法\r\n    if (/on\\w+/.test(name)) {\r\n        name = name.toLowerCase();\r\n        dom[name] = value || '';\r\n        // 如果属性名style，则更新style对象\r\n    } else if (name === 'style') {\r\n        if (!value || typeof value === 'string') {\r\n            dom.style.cssText = value || '';\r\n        } else if (value && typeof value === 'object') {\r\n            for (let name in value) {\r\n                // 可以通过style={ width: 20 }这种形式来设置样式，可以省略掉单位px\r\n                dom.style[name] = typeof value[ name ] === 'number' ? value[ name ] + 'px' : value[ name ];\r\n            }\r\n        }\r\n        // 普通属性则直接更新属性\r\n    } else {\r\n        if (name in dom) {\r\n            dom[ name ] = value || '';\r\n        }\r\n        if (value) {\r\n            dom.setAttribute(name, value);\r\n        } else {\r\n            dom.removeAttribute(name);\r\n        }\r\n    }\r\n}","import { createComponent, setComponentProps } from './diff';\r\nimport { setAttribute } from './dom';\r\n/* \r\n    渲染函数\r\n    _render\r\n*/\r\nexport function _render(vnode) {\r\n    if (vnode === undefined || vnode === null || typeof vnode === 'boolean') { \r\n        vnode = '';\r\n    }\r\n    if (typeof vnode === 'number') {\r\n        vnode = String(vnode);\r\n    }\r\n\r\n    // function Welcome( props ) {\r\n    //     return <h1>Hello, {props.name}</h1>;\r\n    // }\r\n    // tag 是 Welcome\r\n    // 区分组件和原生DOM的工作，是babel-plugin-transform-react-jsx帮我们做的\r\n    if (typeof vnode.tag === 'function') {\r\n        // createComponent方法创建组件实例，并且将函数定义组件扩展为类定义组件进行处理\r\n        const component = createComponent(vnode.tag, vnode.attrs);\r\n        setComponentProps(component, vnode.attrs);\r\n        return component.base;\r\n    }\r\n    // 当vnode为字符串时，渲染结果是一段文本\r\n    if (typeof vnode === 'string' || typeof vnode === 'number') {\r\n        let textNode = document.createTextNode(vnode)\r\n        return textNode;\r\n    }\r\n\r\n    const dom = document.createElement(vnode.tag);\r\n\r\n    if (vnode.attrs) {\r\n        Object.keys(vnode.attrs).forEach(key => {\r\n            const value = vnode.attrs[key];\r\n            setAttribute(dom, key, value); // 设置属性\r\n        });\r\n    }\r\n    vnode.children.forEach(child => render(child, dom)); // 递归渲染子节点\r\n\r\n    return dom; \r\n}\r\n/* \r\n    render的第一个参数接收的是createElement返回的对象\r\n    第二个参数是挂载的目标DOM\r\n    render的作用就是将虚拟DOM渲染成真实的DOM\r\n*/\r\nfunction render (vnode, container) {\r\n    container.innnerHTML = '';\r\n    // 将渲染结果挂载到真正的DOM上\r\n    return container.appendChild(_render(vnode));\r\n}\r\n\r\nexport default render","// import { Component } from '../react'\r\nimport { setAttribute } from './dom';\r\nimport { _render } from './render'\r\n\r\n\r\n/**\r\n * @param {HTMLElement} dom 真实DOM\r\n * @param {vnode} vnode 虚拟DOM\r\n * @param {HTMLElement} container 容器\r\n * @returns {HTMLElement} 更新后的DOM\r\n**/\r\n/* \r\n    diff的初衷：每次更新都重新渲染整个应用或者整个组件，DOM操作消耗性能很严重\r\n    为了减少DOM更新带来的性能消耗，找到渲染前后真正变化的部分，只更新这一部分DOM\r\n    对比虚拟DOM和真是DOM最后返回更新后的DOM\r\n*/\r\nexport function diff(dom, vnode, container) {\r\n    const result = diffNode( dom, vnode );\r\n\r\n    if ( container && result.parentNode !== container ) {\r\n        container.appendChild( result );\r\n    }\r\n\r\n    return result;\r\n}\r\n/* \r\n    diffNode\r\n    对比节点自身\r\n*/\r\nfunction diffNode(dom, vnode) {\r\n    // 从上到下，从左往右逐个处理每个dom节点（如果是修改的话）和vnode\r\n    let out = dom;\r\n\r\n    // undefined/null/boolean的处理\r\n    if ( vnode === undefined || vnode === null || typeof vnode === 'boolean' ) {\r\n        vnode = '';\r\n    }\r\n\r\n    // 对比数字\r\n    if ( typeof vnode === 'number' ) {\r\n        vnode = String( vnode );\r\n    }\r\n\r\n    // 对比字符串\r\n    if (typeof vnode === \"string\") {\r\n        // 当前DOM节点是文本节点，直接更新内容\r\n        // nodeType: https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType\r\n        if (dom && dom.nodeType === 3) {\r\n            if (dom.textContent !== vnode) {\r\n                dom.textContent = vnode;\r\n            }\r\n        // 如果DOM不是文本节点，则新建一个文本节点DOM，并移除掉原来的。新建的文本节点把原来的节点的位置占用了\r\n        } else {\r\n            out = document.createTextNode(vnode);\r\n            if (dom && dom.parentNode) {\r\n                dom.parentNode.replaceChild(out, dom);\r\n            }\r\n        }\r\n        // 文本节点非常简单没有属性，没有子元素\r\n        return out;\r\n    }\r\n\r\n    // 对比组件\r\n    if (typeof vnode.tag === 'function') {\r\n        return diffComponent(dom, vnode);\r\n    }\r\n    // 情况一：如果真实DOM不存在，表示此节点是新增的，或者新旧两个节点的类型不一样，\r\n    // 那么就新建一个DOM元素，并将原来的子节点（如果有的话）移动到新建的DOM节点下。\r\n    if (!dom || !isSameNodeType( dom, vnode )) {\r\n        out = document.createElement(vnode.tag);\r\n        \r\n        // 不是同一类型的dom\r\n        if (dom) {\r\n            // 将原来的子节点移到新节点下\r\n            [...dom.childNodes].map(out.appendChild);\r\n            if (dom.parentNode) {\r\n                // 移除掉原来的DOM对象\r\n                dom.parentNode.replaceChild(out, dom);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // 情况二：如果真实DOM存在，并且和虚拟DOM是同一类型的，那我们暂时不需要做别的，\r\n    // 只需要等待后面对比属性和对比子节点。\r\n    if ( vnode.children && vnode.children.length > 0 || ( out.childNodes && out.childNodes.length > 0 ) ) {\r\n        diffChildren( out, vnode.children );\r\n    }\r\n\r\n    // 对比属性\r\n    diffAttributes( out, vnode );\r\n\r\n    return out;\r\n}\r\n/* \r\n    diffChildren\r\n    对比子节点\r\n*/\r\nfunction diffChildren(dom, vchildren) {\r\n    // 对比子节点时，子节点是一个数组，它们可能改变了顺序，数量。很难确定要和虚拟DOM对比的是哪一个\r\n    // 这里就要为每一个子节点设一个key，重新渲染时对比key值相同的节点\r\n    const domChildren = dom.childNodes;\r\n    const children = [];\r\n\r\n    const keyed = {};\r\n\r\n    // 划分节点：将有key的节点和没有key的节点分开\r\n    if (domChildren.length > 0) {\r\n        for (let index = 0; index < domChildren.length; index++) {\r\n            const child = domChildren[index];\r\n            const key = child.key;\r\n            if (key) {\r\n                // 有key的\r\n                keyed[key] = child;\r\n            } else {\r\n                // 没有key的\r\n                children.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 虚拟DOM的children\r\n    if (vchildren && vchildren.length > 0) {\r\n        let min = 0;\r\n        let childrenLen = children.length;\r\n\r\n        for (let index = 0; index < vchildren.length; index++) {\r\n            const vchild = vchildren[index];\r\n            const key = vchild.key;\r\n            let child;\r\n\r\n            // 如果有key的话，在当前dom的子节点有key的对象中也找得到则更新子节点的值\r\n            if (key) {\r\n                if (keyed[key]) {\r\n                    child = keyed[key];\r\n                    keyed[key] = undefined;\r\n                }\r\n            } else if (min < childrenLen) { // 子节点存在的话\r\n                for (let index = min; index < childrenLen; index++) { // 虚拟节点没有key的节点数小于当前dom没有key的节点数\r\n                    let c = children[index]; // 当前没有key的dom\r\n                    if (c && isSameNodeType( c, vchild )) { // 当前没有key的dom是否存在，可能被删除了\r\n                        child = c;\r\n                        children[index] = undefined;\r\n                        if (index === childrenLen -1 ) {\r\n                            childrenLen--;\r\n                        }\r\n                        if (index === min) {\r\n                            min++;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 对比\r\n            child = diff(child, vchild);\r\n\r\n            // 更新DOM\r\n            const f = domChildren[index];\r\n            if (child && child !== dom && child !== f) {\r\n                // 如果更新前的对应位置为空，说明此节点时新增的\r\n                if (!f) {\r\n                    dom.appendChild(child);\r\n                // 如果更新后的节点和更新前对应位置的下一个节点一样，说明当前位置的节点被移除了\r\n                } else if (child === f.nextSibling) {\r\n                    removeNode(f);\r\n                // 将更新后的节点移动到正确的位置\r\n                } else {\r\n                    // 注意insertBefore的用法，第一个参数是要插入的节点，第二个参数是已存在的节点\r\n                    dom.insertBefore(child, f);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/* \r\n    diffComponent\r\n    对比组件\r\n*/\r\nfunction diffComponent(dom, vnode) {\r\n    let c = dom && dom._component;\r\n    let oldDom = dom;\r\n\r\n    // 如果组件类型没有变化则重新set props\r\n    if (c && c.constructor === vnode.tag) {\r\n        setComponentProps(c, vnode.attrs);\r\n        dom = c.base;\r\n        // 如果组件类型变化，则移除掉原来组件，并渲染新的组件\r\n    } else {\r\n        if (c) {\r\n            unmountComponent(c);\r\n            oldDom = null;\r\n        }\r\n\r\n        c = createComponent(vnode.tag, vnode.attrs);\r\n\r\n        setComponentProps(c, vnode.attrs);\r\n        dom = c.base;\r\n\r\n        if (oldDom && dom !== oldDom) {\r\n            oldDom._component = null;\r\n            removeNode(oldDom);\r\n        }\r\n    }\r\n    return dom;\r\n}\r\n/* \r\n    diffAttributes\r\n    对比节点属性\r\n*/\r\nfunction diffAttributes( dom, vnode ) {\r\n    // diff算法不仅要找出节点类型的变化，还要找出节点的属性以及事件监听的变化\r\n    const old = {}; // 当前DOM的属性\r\n    const attrs = vnode.attrs; // 虚拟DOM的属性\r\n    // 获取当前DOM节点的属性\r\n    for (let index = 0; index < dom.attributes.length; index++) {\r\n        const attr = dom.attributes[index];\r\n        old[attr.name] = attr.value;\r\n    }\r\n\r\n    // 如果原来的属性不在新属性当中，则将其移除掉\r\n    for (let name in old) {\r\n        if (!(name in attrs)) {\r\n            setAttribute(dom, name, undefined);\r\n        }\r\n    }\r\n\r\n    // 更新当前dom的属性值\r\n    for (let name in attrs) {\r\n        if (old[name] !== attrs[name]) {\r\n            setAttribute(dom, name, attrs[name]);\r\n        }\r\n    }\r\n}\r\n/* \r\n    isSameNodeType\r\n    是否是同一类型的node\r\n*/\r\nfunction isSameNodeType( dom, vnode ) {\r\n    if ( typeof vnode === 'string' || typeof vnode === 'number' ) {\r\n        return dom.nodeType === 3;\r\n    }\r\n\r\n    if ( typeof vnode.tag === 'string' ) {\r\n        return dom.nodeName.toLowerCase() === vnode.tag.toLowerCase();\r\n    }\r\n\r\n    return dom && dom._component && dom._component.constructor === vnode.tag;\r\n}\r\n/* \r\n    renderComponent\r\n    渲染组件\r\n*/\r\nexport function renderComponent(component) {\r\n    let base;\r\n    // 调用组件的render函数返回dom对象\r\n    const renderer = component.render();\r\n    if (component.base && component.componentWillUpdate) {\r\n        component.componentWillUpdate();\r\n    }\r\n    // base = _render(renderer);\r\n    base = diff(component.base, renderer);\r\n    \r\n\r\n    if ( component.base ) {\r\n        if ( component.componentDidUpdate ) component.componentDidUpdate();\r\n    } else if ( component.componentDidMount ) {\r\n        component.componentDidMount();\r\n    }\r\n\r\n    // if ( component.base && component.base.parentNode ) {\r\n    //     component.base.parentNode.replaceChild( base, component.base );\r\n    // }\r\n\r\n    // component.base保存组件实例最终渲染出来的DOM\r\n    // 反过来base._component保存的是dom对象所对应的组件，这个就是为了把他们关联起来\r\n    component.base = base;\r\n    base._component = component;\r\n}\r\n/* \r\n    setComponentProps\r\n    设置组件属性\r\n*/\r\nexport function setComponentProps(component, props) {\r\n    if (!component.base) {\r\n        if (component.componentWillMount) {\r\n            component.componentWillMount();\r\n        } else if (component.compoentWillReceiveProps) {\r\n            component.compoentWillReceiveProps();\r\n        }\r\n\r\n        component.props = props;\r\n        // renderComponent方法用来渲染组件，setState方法会直接调用这个方法进行重新渲染\r\n        // 在这个方法里可以实现componentWillUpdate, componentDidUpdate, componentDidMount\r\n        renderComponent(component);\r\n    }\r\n}\r\n/* \r\n    createComponent\r\n    创建组件实例\r\n*/\r\nexport function createComponent(Constructor, props) {\r\n    // Constructor === component\r\n    let inst;\r\n    // 如果是类定义组件，则直接返回实例\r\n    if (Constructor.prototype && Constructor.prototype.render) {\r\n        inst = new Constructor(props);\r\n        // 如果是函数定义组件，则将其扩展为类定义组件\r\n    } else {\r\n        inst = new Constructor(props);\r\n        inst.constructor = Constructor;\r\n        inst.render = function () {\r\n            return this.constructor(props);\r\n        }\r\n    }\r\n    return inst;\r\n}\r\n/* \r\n    unmountComponent\r\n    卸载组件\r\n*/\r\nfunction unmountComponent( component ) {\r\n    if ( component.componentWillUnmount ) component.componentWillUnmount();\r\n    removeNode( component.base);\r\n}","import { renderComponent } from '../react-dom/diff'\r\n\r\nconst setStateQueue = []; // 保存组件stateChange的队列\r\nconst renderQueue = []; // 保存\r\n\r\n// 异步执行\r\nfunction defer(fn) {\r\n    return Promise.resolve().then(fn);\r\n};\r\n\r\n// 用一个队列来保存每次的setState\r\nexport function enqueueSetState(stateChange, component) {\r\n    // 第一次setState的时候\r\n    if (setStateQueue.length === 0) {\r\n        defer(flush);\r\n    };\r\n    // 把组件和组件这一次的setState入队列\r\n    setStateQueue.push({\r\n        stateChange,\r\n        component\r\n    });\r\n\r\n    if (!renderQueue.some(item => item === component)) {\r\n        renderQueue.push(component);\r\n    };\r\n};\r\n// 清空队列并渲染组件\r\n// stateChange1---component\r\n// stateChange2---component\r\n// stateChange3---component\r\n// setState出队列，component出队列，更新component上的state/如果是函数的话（解决异步导致view更新了视觉上数据还没更新）还更新setState\r\n\r\nfunction flush() {\r\n    let item, component;\r\n    // 遍历保存了组件setState的队列\r\n    while(item = setStateQueue.shift()) { // 出队列\r\n        const { stateChange, component } = item; // 组件改变的state和组件实例\r\n\r\n        // 如果没有prevState，则将当前的state作为初始的prevState\r\n        if (!component.prevState) {\r\n            component.prevState = Object.assign({}, component.state);\r\n        };\r\n\r\n        // 如果stateChange是一个方法，也就是setState的第二种形式解决因为异步导致的视觉上没有直接更新数据\r\n        if (typeof stateChange === 'function') {\r\n            Object.assign(component.state, stateChange(component.prevState, component.props));\r\n        } else {\r\n            // 如果stateChange是一个对象，则直接合并到setState中\r\n            Object.assign(component.state, stateChange);\r\n        };\r\n\r\n        component.prevState = component.state;\r\n    };\r\n\r\n    // 组件队列中的组件出队列\r\n    while(component = renderQueue.shift()) {\r\n        renderComponent(component);\r\n    };\r\n};","import { enqueueSetState } from './set-state-queue'\r\n;\r\nclass Component {\r\n    // 通过继承React.Component的props和state。子组件拥有了自己私有的state，同时可以通过this.props获取父组件传入的数据\r\n    // 所以在Component类中初始化state和props\r\n    constructor(props = {}) {\r\n        this.state = {};\r\n        this.props = props;\r\n    }\r\n    // 组件通过调用继承自Component的setState来触发组件的更新\r\n    setState(stateChange) {\r\n        // Object.assign( this.state, stateChange );\r\n        // renderComponent( this );\r\n        \r\n        // 对setState的异步优化\r\n        // this当前类的实例\r\n        enqueueSetState( stateChange, this );\r\n    }\r\n}\r\nexport default Component;","/* \r\n    createElement方法会将JSX代码转译为一个对象\r\n    tag标签名\r\n    attrs一个包含了所有属性的对象\r\n    children所有子节点的对象\r\n*/\r\n/**\r\n * @example\r\n * <h1> hello world </h1>\r\n * 可以通过jsx被转化为\r\n * createElement('h1', {id: 'greet'}, 'hello world')\r\n */\r\nfunction createElement (tag, attrs, ...children) {\r\n    attrs = attrs || {};\r\n    return {\r\n        tag,\r\n        attrs,\r\n        children,\r\n        key: attrs.key || null\r\n    }\r\n};\r\n\r\nexport default createElement;","import Component from './component.js';\r\nimport createElement from './create-element.js'\r\n\r\nexport default {\r\n    Component,\r\n    createElement\r\n}","import render from './render'\r\n\r\nexport default {\r\n    render\r\n}\r\n","import React from './react';\r\nimport ReactDOM from './react-dom';\r\n\r\n/* \r\n    验证类组件\r\n*/\r\nclass Conuter extends React.Component {\r\n    constructor(props) {\r\n        super(props); // 继承父组件的props 默认为{}\r\n        this.state = { // 继承父组件的state和setState方法\r\n            count: 0\r\n        }\r\n    }\r\n    // 验证生命周期\r\n    componentDidMount() {\r\n        // 不对setState优化的话，setState会被执行很多次对性能有很大的损耗\r\n        // react会将多个setState合并为一个setState来执行\r\n\r\n        // for (let index = 0; index < 100; index++) {\r\n        //     this.setState(prevState => {\r\n        //         return {\r\n        //             count: prevState.count + 1\r\n        //         }\r\n        //     });\r\n        // }\r\n        console.log('componentDidMount');\r\n    };\r\n    componentDidUpdate() {\r\n        \r\n        console.log('componentDidUpdate');\r\n    };\r\n    componentWillUnmount() {\r\n        \r\n        console.log('componentWillUnmount');\r\n    };\r\n    onAddCount() {\r\n        // this.setState( (a, b) => {\r\n        //     return {\r\n        //         count: this.state.count+1\r\n        //     }\r\n        // });\r\n        this.setState({ count: this.state.count+1 });\r\n    };\r\n    // 类组件的render以及函数组件的return都会返回一个react element。而且这个element包含两个属性：type:(string|ReactClass)和props:Object\r\n    // 虚拟DOM是对组件实例的描述也是对DOM节点的描述\r\n    // 每次props的更新都会先反映到虚拟DOM树上面然后才会映射到真实的DOM树上面进行渲染\r\n    render() {\r\n        return (\r\n            <div id=\"div\">\r\n                <h1 id=\"h1\">{this.state.count}</h1>\r\n                <button id=\"button\" onClick={this.onAddCount.bind(this)}>ADD</button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n/* \r\n    验证函数组件\r\n*/\r\nfunction App() {\r\n    return (\r\n        <h1 id=\"h1\">Hello World</h1>\r\n    )\r\n};\r\n// ReactDOM.render就是将虚拟DOM（经过babel插件转换后的jsx代码）渲染成真实的DOM挂载到目标DOM下面\r\nReactDOM.render(<Conuter />, document.getElementById('root'));"]}